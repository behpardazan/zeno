@using DataLayer.Entities;
@using DataLayer.ViewModels;
@using DataLayer.Enumarables;
@model DataLayer.Entities.TelegramKeyBoardItem
@{
    TelegramKeyBoard keyboard = ViewBag.TelegramKeyBoard;
    ViewBag.Title = Resource.Lang.EditKeyboardItem + keyboard.Name;
    Layout = "~/Views/Shared/Layout.cshtml";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="col-sm-12">
        <div class="card-box">
            <a href="@Url.Action("index", new { keyboardId = keyboard.ID })" class="icon circle-icon glyphicon glyphicon-arrow-left" data-toggle="tooltip" data-placement="bottom" title=@Resource.Lang.Back></a>
            <div class="col-sm-6">
                <div class="form-horizontal">
                    <div>
                        <div class="col-md-10 col-md-offset-2">
                            <div class="row">
                                @Html.Partial("~/Views/Public/Message.cshtml", (ViewMessage)ViewBag.Message)
                            </div>
                        </div>
                    </div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ID)
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, @Resource.Lang.ItemTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @if (keyboard.Code.Label == Enum_Code.TELEGRAM_KEYBOARD_TYPE_BUTTON.ToString())
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.CommandId, Resource.Lang.Instructions, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("CommandId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CommandId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Url, Resource.Lang.InternetAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    <div class="form-group">
                        @Html.LabelFor(model => model.Row, Resource.Lang.RowNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Row, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Row, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ShowNumber,Resource.Lang.ColumnNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ShowNumber, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.ShowNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value=@Resource.Lang.Save class="btn btn-success" />
                            <span class="btn btn-inverse">@Html.ActionLink(Resource.Lang.Back, "Index", new { keyboardId = keyboard.ID })</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
}