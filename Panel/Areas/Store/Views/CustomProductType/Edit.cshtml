@using DataLayer.Base;
@using DataLayer.Entities;
@using DataLayer.ViewModels;
@using DataLayer.Enumarables;
@model DataLayer.Entities.ProductCustomField
@{
    ViewBag.Title = Resource.Lang.EditPrivateField;
    Layout = "~/Views/Shared/Layout.cshtml";
    string backUrl = Url.Action("index", new { @typeId = Model.ProductTypeId, @categoryId = Model.ProductCategoryId, @subCategoryId = Model.ProductSubCategoryId, @brandId = Model.ProductBrandId });
}
<div codeprocess-ajax-form = "/store/customproducttype/edit" codeprocess-back-form="@backUrl">
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.ProductTypeId)
    @Html.HiddenFor(model => model.ProductCategoryId)
    @Html.HiddenFor(model => model.ProductSubCategoryId)
    @Html.HiddenFor(model => model.ProductBrandId)
    @Html.HiddenFor(model => model.SyncId)
    @Html.HiddenFor(model => model.SyncDatetime)
    <div class="col-sm-12">
        <div class="card-box">
            <a href="@backUrl" class="icon circle-icon glyphicon glyphicon-arrow-left" data-toggle="tooltip" data-placement="bottom" title=@Resource.Lang.Back></a>
            <div class="col-sm-6">
                <div class="form-horizontal">
                    <div>
                        <div class="col-md-10 col-md-offset-2">
                            <div class="row">
                                @Html.Partial("~/Views/Public/Message.cshtml", (ViewMessage)ViewBag.Message)
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TypeId, Resource.Lang.TypeField, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("TypeId", null, htmlAttributes: new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, @Resource.Lang.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        </div>
                    </div>
                    @foreach (WebsiteLanguage lang in BaseLanguage.GetWebsiteLanguages())
                    {
                        if (lang.Language.Label != Enum_Lang.FA.ToString())
                        {
                            ProductCustomFieldLanguage typeLanguage = Model.ProductCustomFieldLanguage.FirstOrDefault(p => p.LanguageId == lang.LanguageId);
                            string typeLanguageValue = typeLanguage != null ? typeLanguage.Name : "";
                            <div class="form-group" lang-value="@lang.Language.Label.ToLower()">
                                <input type="hidden" lang-name="LanguageId" value="@lang.LanguageId" />
                                <label class="control-label col-md-2">@Resource.Lang.Name (@lang.Language.Name)</label>
                                <div class="col-md-10">
                                    <input type="text" lang-name="Name" class="form-control" autocomplete="off" value="@typeLanguageValue" />
                                </div>
                            </div>
                        }
                    }
                    <div class="form-group">
                        @Html.LabelFor(model => model.ShowNumber, @Resource.Lang.PriorityShow, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ShowNumber, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SyncName, @Resource.Lang.RemoteServer, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SyncName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.IsRequired, @Resource.Lang.Forced_NotForced, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.IsRequired)
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Active, @Resource.Lang.ActiveDeactive, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                    
                                @Html.EditorFor(model => model.Active  )
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input id="btnSubmit" type="submit" value=@Resource.Lang.Save class="btn btn-success" />
                            <a class="btn btn-inverse" href="@backUrl">@Resource.Lang.Back</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>

@section Script {
    <script type="text/javascript">
        $(document).ready(function () {
            initializeProductCustomFieldScript();
        });
    </script>
}
